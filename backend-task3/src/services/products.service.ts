// services/products.service.ts
import { ProductModel } from '../model/products.model.js';

// ---- Helpers √©p ki·ªÉu an to√†n (SQL Server ƒë√¥i khi tr·∫£ bigint/Decimal) ----
const toId = (v: any): number =>
  typeof v === 'bigint' ? Number(v) : parseInt(String(v ?? 0), 10);

const toNum = (v: any): number =>
  v && typeof v === 'object' && 'toNumber' in v ? v.toNumber() : Number(v);

// Ch·ªçn 1 media theo lo·∫°i, ∆∞u ti√™n primary r·ªìi ƒë·∫øn sortOrder tƒÉng d·∫ßn
function pickOne(arr: any[], type: 'image' | 'video') {
  const list = (arr || []).filter(m => m.type === type);
  if (!list.length) return null;
  const primary = list.find(m => m.isPrimary);
  if (primary) return primary;
  return [...list].sort((a, b) => (a.sortOrder ?? 0) - (b.sortOrder ?? 0))[0];
}

export type ProductDTO = {
  id: number;
  name: string;
  unit: string;
  price: number;
  stock: number;
  imageUrl?: string | null;
  videoUrl?: string | null;
};

export type PageResult = {
  items: ProductDTO[];
  hasNext: boolean;
  lastId: number | null; // cursor cho trang k·∫ø (id cu·ªëi c·ªßa trang hi·ªán t·∫°i)
};

export const ProductService = {
  /**
   * Ph√¢n trang ki·ªÉu keyset (ASC) + batch t·ªìn kho & media.
   * Model.getPageAsc ƒë√£ lo:
   *  - Trang 1: take(size+1)
   *  - Trang >= 2: cursor {id:lastId} + skip:1 + take(size+1)
   *  - T√≠nh hasNext & lastId (id cu·ªëi sau khi c·∫Øt v·ªÅ size)
   */
  async getProductsWithPagination(size: number, lastId?: number | null): Promise<PageResult> {
    const startService = Date.now();

    // üö© D√πng getPageAsc thay v√¨ getAll
    const page = await ProductModel.getPageAsc(size, lastId ?? null);
    if (!page.items.length) {
      return { items: [], hasNext: false, lastId: null };
    }

    // Batch t·ªìn kho & media ch·ªâ theo ids trong trang hi·ªán t·∫°i
    const ids = page.items.map(p => toId(p.id));
    const [stockMap, mediaMap] = await Promise.all([
      ProductModel.getStockByIds(ids), // Map<productId, stock>
      ProductModel.getMediaByIds(ids), // Map<productId, media[]>
    ]);

    // Gh√©p d·ªØ li·ªáu hi·ªÉn th·ªã
    const items: ProductDTO[] = page.items.map(p => {
      const medias = mediaMap.get(p.id) ?? [];
      const image = pickOne(medias, 'image');
      const video = pickOne(medias, 'video');

      return {
        id: toId(p.id),
        name: p.name,
        unit: p.unit,
        price: toNum(p.price),
        stock: stockMap.get(p.id) ?? 0,
        imageUrl: image?.url ?? null,
        videoUrl: video?.url ?? null,
      };
    });

    console.info(`Service processing time: ${Date.now() - startService}ms`);

    return {
      items,
      hasNext: page.hasNext,
      lastId: page.lastId, // üëà FE d√πng l√†m cursor cho trang k·∫ø
    };
  },
};
